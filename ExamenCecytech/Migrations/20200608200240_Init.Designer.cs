// <auto-generated />
using System;
using ExamenCecytech.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamenCecytech.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200608200240_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ExamenCecytech.Data.Aspirante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DescripcionOtraSecundaria")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Edad");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EspecialidadId")
                        .HasMaxLength(12);

                    b.Property<string>("Estatus")
                        .HasMaxLength(2);

                    b.Property<string>("Ficha")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int?>("GrupoId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Materno")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("NombreSecundaria")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Paterno")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PlainPass")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("PromedioSecundaria");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("TipoSecundaria")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("TipoSostenimientoSecundaria")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasAlternateKey("Ficha");

                    b.HasIndex("EspecialidadId");

                    b.HasIndex("GrupoId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ExamenCecytech.Data.Competencia", b =>
                {
                    b.Property<int>("CompetenciaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LecturaPrevia");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TiempoParaResolver");

                    b.HasKey("CompetenciaId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Competencias");
                });

            modelBuilder.Entity("ExamenCecytech.Data.Especialidad", b =>
                {
                    b.Property<string>("EspecialidadId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("EspecialidadId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("ExamenCecytech.Data.Grupo", b =>
                {
                    b.Property<int>("GrupoId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClavePlantel")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("ClaveSIIACE")
                        .HasMaxLength(5);

                    b.Property<bool>("EvaluacionHabilitada");

                    b.Property<DateTime>("FechaExamen");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Semestre")
                        .HasMaxLength(1);

                    b.Property<string>("Turno")
                        .HasMaxLength(1);

                    b.HasKey("GrupoId");

                    b.HasIndex("ClavePlantel");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("ExamenCecytech.Data.Plantel", b =>
                {
                    b.Property<int>("PlantelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaveCentroTrabajo")
                        .HasMaxLength(10);

                    b.Property<string>("ClavePlantel")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("ClaveSIIACE")
                        .HasMaxLength(2);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PlantelId");

                    b.HasIndex("ClaveCentroTrabajo")
                        .IsUnique()
                        .HasFilter("[ClaveCentroTrabajo] IS NOT NULL");

                    b.HasIndex("ClaveSIIACE")
                        .IsUnique()
                        .HasFilter("[ClaveSIIACE] IS NOT NULL");

                    b.ToTable("Planteles");
                });

            modelBuilder.Entity("ExamenCecytech.Data.Pregunta", b =>
                {
                    b.Property<int>("PreguntaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompetenciaId");

                    b.Property<string>("LecturaPrevia");

                    b.Property<int>("NumeroPregunta");

                    b.Property<int>("Orden1");

                    b.Property<int>("Orden2");

                    b.Property<string>("Texto")
                        .IsRequired();

                    b.HasKey("PreguntaId");

                    b.HasAlternateKey("NumeroPregunta");

                    b.ToTable("Preguntas");
                });

            modelBuilder.Entity("ExamenCecytech.Data.RespuestaEvaluacion", b =>
                {
                    b.Property<int>("RespuestaEvaluacionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AspiranteId");

                    b.Property<int>("CompetenciaId");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaModificacion");

                    b.Property<int>("PreguntaId");

                    b.Property<int>("RespuestaPreguntaId");

                    b.Property<string>("UsuarioCreacion")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UsuarioModificacion")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("RespuestaEvaluacionId");

                    b.HasAlternateKey("AspiranteId", "CompetenciaId", "PreguntaId");

                    b.HasIndex("CompetenciaId", "PreguntaId", "RespuestaPreguntaId");

                    b.ToTable("RespuestasEvaluaciones");
                });

            modelBuilder.Entity("ExamenCecytech.Data.RespuestaPregunta", b =>
                {
                    b.Property<int>("RespuestaPreguntaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaveCOSDAC")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int>("CompetenciaId");

                    b.Property<int>("Orden1");

                    b.Property<int>("Orden2");

                    b.Property<int>("PreguntaId");

                    b.Property<string>("Texto")
                        .IsRequired();

                    b.Property<int>("Valor");

                    b.HasKey("RespuestaPreguntaId");

                    b.HasAlternateKey("CompetenciaId", "PreguntaId", "ClaveCOSDAC");

                    b.ToTable("RespuestasPreguntas");
                });

            modelBuilder.Entity("ExamenCecytech.Data.UsuarioPlantel", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("ClavePlantel");

                    b.HasKey("Id", "ClavePlantel");

                    b.HasIndex("ClavePlantel");

                    b.ToTable("UsuariosPlantel");
                });

            modelBuilder.Entity("ExamenCecytech.Models.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ExamenCecytech.Data.Aspirante", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Especialidad", "Especialidad")
                        .WithMany()
                        .HasForeignKey("EspecialidadId");

                    b.HasOne("ExamenCecytech.Data.Grupo", "Grupo")
                        .WithMany("Aspirantes")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ExamenCecytech.Data.Grupo", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Plantel", "Plantel")
                        .WithMany("GruposPlantel")
                        .HasForeignKey("ClavePlantel")
                        .HasPrincipalKey("ClavePlantel")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ExamenCecytech.Data.Pregunta", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Competencia", "Competencia")
                        .WithMany("Preguntas")
                        .HasForeignKey("CompetenciaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamenCecytech.Data.RespuestaEvaluacion", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Aspirante", "Aspirante")
                        .WithMany("RespuestasEvaluacion")
                        .HasForeignKey("AspiranteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamenCecytech.Data.Pregunta", "Pregunta")
                        .WithMany()
                        .HasForeignKey("CompetenciaId", "PreguntaId")
                        .HasPrincipalKey("CompetenciaId", "PreguntaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ExamenCecytech.Data.RespuestaPregunta", "RespuestaPregunta")
                        .WithMany()
                        .HasForeignKey("CompetenciaId", "PreguntaId", "RespuestaPreguntaId")
                        .HasPrincipalKey("CompetenciaId", "PreguntaId", "RespuestaPreguntaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ExamenCecytech.Data.RespuestaPregunta", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Pregunta", "Pregunta")
                        .WithMany("RespuestasPregunta")
                        .HasForeignKey("CompetenciaId", "PreguntaId")
                        .HasPrincipalKey("CompetenciaId", "PreguntaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ExamenCecytech.Data.UsuarioPlantel", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Plantel", "Plantel")
                        .WithMany("UsuariosPlantel")
                        .HasForeignKey("ClavePlantel")
                        .HasPrincipalKey("ClavePlantel")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamenCecytech.Data.Aspirante", "Aspirante")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ExamenCecytech.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Aspirante")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Aspirante")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ExamenCecytech.Models.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExamenCecytech.Data.Aspirante")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ExamenCecytech.Data.Aspirante")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
